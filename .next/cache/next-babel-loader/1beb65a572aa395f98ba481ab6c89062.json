{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\"; // import \"@atlaskit/css-reset\";\n\nimport Column from \"./column\";\n\nconst array_move = (arr, old_index, new_index) => {\n  if (new_index >= arr.length) {\n    var k = new_index - arr.length + 1;\n\n    while (k--) {\n      arr.push(undefined);\n    }\n  }\n\n  arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n  return arr; // for testing\n};\n\nclass Dragable extends Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"onDragEnd\", result => {\n      console.log(\"drag result\", result);\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.draggableId === source.draggableId && destination.index === source.index) {\n        return;\n      }\n\n      const tasks = [...this.state.tasks];\n      const newArr = array_move(tasks, source[\"index\"], destination[\"index\"]); // console.log(\"destination.index\", destination.index);\n\n      this.setState({\n        tasks: newArr\n      });\n    });\n\n    this.state = {\n      tasks: initialData.tasks\n    };\n  }\n\n  render() {\n    return __jsx(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      onDragStart: this.onDragStart,\n      onDragUpdate: this.onDragUpdate\n    }, __jsx(Column, {\n      key: \"column.id\",\n      tasks: this.state.tasks\n    }));\n  }\n\n}\n\nexport default Dragable; // state = initialData;\n// onDragStart = () => {\n//   document.body.style.color = \"orange\";\n// };\n// onDragUpdate = update => {\n//   const { destination } = update;\n//   const opacity = destination ? destination.index / Object.keys(this.state.tasks).length : 0;\n// };\n//   console.log(\"result \", result);\n// document.body.style.color = \"inherit\";\n// const { destination, source, draggableId } = result;\n// if (!destination) {\n//   return;\n// }\n// if (destination.draggableId === source.draggableId && destination.index === source.index) {\n//   return;\n// }\n// const column = this.state.columns[source.droppableId];\n// const newTaskIds = Array.from(column.taskIds);\n// newTaskIds.splice(source.index, 1);\n// newTaskIds.splice(destination.index, 0, draggableId);\n// const newColumn = {\n//   ...column,\n//   taskIds: newTaskIds\n// };\n// const newState = {\n//   ...this.state,\n//   columns: {\n//     ...this.state.columns,\n//     [newColumn.id]: newColumn\n//   }\n// };\n// this.setState(newState);\n// };\n// render() {\n//   return (\n//     <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart} onDragUpdate={this.onDragUpdate}>\n//       {this.state.columnOrder.map(columnId => {\n//         const column = this.state.columns[columnId];\n//         console.log(\"columnId ::: \", column);\n//         const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n//         console.log(\"task jdkfj \", tasks);\n//         return <Column key={column.id} column={column} tasks={tasks} />;\n//       })}\n//     </DragDropContext>\n//   );\n// }","map":{"version":3,"sources":["/Users/sikandarkumarkumar/Desktop/exampl/components/DragableExample/Dragable.js"],"names":["React","Component","initialData","DragDropContext","Column","array_move","arr","old_index","new_index","length","k","push","undefined","splice","Dragable","constructor","props","result","console","log","destination","source","draggableId","index","tasks","state","newArr","setState","render","onDragEnd","onDragStart","onDragUpdate"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,eAAT,QAAgC,qBAAhC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,SAAN,EAAiBC,SAAjB,KAA+B;AAChD,MAAIA,SAAS,IAAIF,GAAG,CAACG,MAArB,EAA6B;AAC3B,QAAIC,CAAC,GAAGF,SAAS,GAAGF,GAAG,CAACG,MAAhB,GAAyB,CAAjC;;AACA,WAAOC,CAAC,EAAR,EAAY;AACVJ,MAAAA,GAAG,CAACK,IAAJ,CAASC,SAAT;AACD;AACF;;AACDN,EAAAA,GAAG,CAACO,MAAJ,CAAWL,SAAX,EAAsB,CAAtB,EAAyBF,GAAG,CAACO,MAAJ,CAAWN,SAAX,EAAsB,CAAtB,EAAyB,CAAzB,CAAzB;AACA,SAAOD,GAAP,CARgD,CAQpC;AACb,CATD;;AAWA,MAAMQ,QAAN,SAAuBb,SAAvB,CAAiC;AAC/Bc,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,uCAOPC,MAAM,IAAI;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BF,MAA3B;AACA,YAAM;AAAEG,QAAAA,WAAF;AAAeC,QAAAA,MAAf;AAAuBC,QAAAA;AAAvB,UAAuCL,MAA7C;;AACA,UAAI,CAACG,WAAL,EAAkB;AAChB;AACD;;AACD,UAAIA,WAAW,CAACE,WAAZ,KAA4BD,MAAM,CAACC,WAAnC,IAAkDF,WAAW,CAACG,KAAZ,KAAsBF,MAAM,CAACE,KAAnF,EAA0F;AACxF;AACD;;AACD,YAAMC,KAAK,GAAG,CAAC,GAAG,KAAKC,KAAL,CAAWD,KAAf,CAAd;AAEA,YAAME,MAAM,GAAGrB,UAAU,CAACmB,KAAD,EAAQH,MAAM,CAAC,OAAD,CAAd,EAAyBD,WAAW,CAAC,OAAD,CAApC,CAAzB,CAXoB,CAYpB;;AACA,WAAKO,QAAL,CAAc;AAAEH,QAAAA,KAAK,EAAEE;AAAT,OAAd;AACD,KArBkB;;AAEjB,SAAKD,KAAL,GAAa;AACXD,MAAAA,KAAK,EAAEtB,WAAW,CAACsB;AADR,KAAb;AAGD;;AAkBDI,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,eAAD;AAAiB,MAAA,SAAS,EAAE,KAAKC,SAAjC;AAA4C,MAAA,WAAW,EAAE,KAAKC,WAA9D;AAA2E,MAAA,YAAY,EAAE,KAAKC;AAA9F,OACE,MAAC,MAAD;AAAQ,MAAA,GAAG,EAAE,WAAb;AAA0B,MAAA,KAAK,EAAE,KAAKN,KAAL,CAAWD;AAA5C,MADF,CADF;AAKD;;AA9B8B;;AAgCjC,eAAeV,QAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n// import \"@atlaskit/css-reset\";\nimport Column from \"./column\";\n\nconst array_move = (arr, old_index, new_index) => {\n  if (new_index >= arr.length) {\n    var k = new_index - arr.length + 1;\n    while (k--) {\n      arr.push(undefined);\n    }\n  }\n  arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n  return arr; // for testing\n};\n\nclass Dragable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: initialData.tasks\n    };\n  }\n\n  onDragEnd = result => {\n    console.log(\"drag result\", result);\n    const { destination, source, draggableId } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.draggableId === source.draggableId && destination.index === source.index) {\n      return;\n    }\n    const tasks = [...this.state.tasks];\n\n    const newArr = array_move(tasks, source[\"index\"], destination[\"index\"]);\n    // console.log(\"destination.index\", destination.index);\n    this.setState({ tasks: newArr });\n  };\n\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart} onDragUpdate={this.onDragUpdate}>\n        <Column key={\"column.id\"} tasks={this.state.tasks} />\n      </DragDropContext>\n    );\n  }\n}\nexport default Dragable;\n\n// state = initialData;\n// onDragStart = () => {\n//   document.body.style.color = \"orange\";\n// };\n// onDragUpdate = update => {\n//   const { destination } = update;\n//   const opacity = destination ? destination.index / Object.keys(this.state.tasks).length : 0;\n// };\n\n//   console.log(\"result \", result);\n// document.body.style.color = \"inherit\";\n// const { destination, source, draggableId } = result;\n// if (!destination) {\n//   return;\n// }\n// if (destination.draggableId === source.draggableId && destination.index === source.index) {\n//   return;\n// }\n// const column = this.state.columns[source.droppableId];\n// const newTaskIds = Array.from(column.taskIds);\n// newTaskIds.splice(source.index, 1);\n// newTaskIds.splice(destination.index, 0, draggableId);\n// const newColumn = {\n//   ...column,\n//   taskIds: newTaskIds\n// };\n// const newState = {\n//   ...this.state,\n//   columns: {\n//     ...this.state.columns,\n//     [newColumn.id]: newColumn\n//   }\n// };\n\n// this.setState(newState);\n// };\n\n// render() {\n//   return (\n//     <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart} onDragUpdate={this.onDragUpdate}>\n//       {this.state.columnOrder.map(columnId => {\n//         const column = this.state.columns[columnId];\n//         console.log(\"columnId ::: \", column);\n//         const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n//         console.log(\"task jdkfj \", tasks);\n//         return <Column key={column.id} column={column} tasks={tasks} />;\n//       })}\n//     </DragDropContext>\n//   );\n// }\n"]},"metadata":{},"sourceType":"module"}