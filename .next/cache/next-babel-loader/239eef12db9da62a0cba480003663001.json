{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\"; // import \"@atlaskit/css-reset\";\n\nimport Column from \"./column\";\n\nclass Dragable extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", initialData);\n\n    _defineProperty(this, \"onDragEnd\", result => {\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.draggableId === source.draggableId && destination.index === source.index) {\n        return;\n      }\n\n      const column = this.state.columns[source.draggableId];\n      const newTaskIds = Array.from(column.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = _objectSpread({}, column, {\n        taskIds: newTaskIds\n      });\n    });\n  }\n\n  render() {\n    return __jsx(DragDropContext, {\n      onDragEnd: this.onDragEnd\n    }, this.state.columnOrder.map(columnId => {\n      const column = this.state.columns[columnId];\n      const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n      return __jsx(Column, {\n        key: column.id,\n        column: column,\n        tasks: tasks\n      });\n    }));\n  }\n\n}\n\nexport default Dragable;","map":{"version":3,"sources":["/Users/sikandarkumarkumar/Desktop/exampl/components/DragableExample/Dragable.js"],"names":["React","Component","initialData","DragDropContext","Column","Dragable","result","destination","source","draggableId","index","column","state","columns","newTaskIds","Array","from","taskIds","splice","newColumn","render","onDragEnd","columnOrder","map","columnId","tasks","taskId","id"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,eAAT,QAAgC,qBAAhC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AACA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAAA;AAAA;;AAAA,mCACvBC,WADuB;;AAAA,uCAEnBI,MAAM,IAAI;AACpB,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA,MAAf;AAAuBC,QAAAA;AAAvB,UAAuCH,MAA7C;;AACA,UAAI,CAACC,WAAL,EAAkB;AAChB;AACD;;AACD,UAAIA,WAAW,CAACE,WAAZ,KAA4BD,MAAM,CAACC,WAAnC,IAAkDF,WAAW,CAACG,KAAZ,KAAsBF,MAAM,CAACE,KAAnF,EAA0F;AACxF;AACD;;AACD,YAAMC,MAAM,GAAG,KAAKC,KAAL,CAAWC,OAAX,CAAmBL,MAAM,CAACC,WAA1B,CAAf;AACA,YAAMK,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWL,MAAM,CAACM,OAAlB,CAAnB;AACAH,MAAAA,UAAU,CAACI,MAAX,CAAkBV,MAAM,CAACE,KAAzB,EAAgC,CAAhC;AACAI,MAAAA,UAAU,CAACI,MAAX,CAAkBX,WAAW,CAACG,KAA9B,EAAqC,CAArC,EAAwCD,WAAxC;;AACA,YAAMU,SAAS,qBACVR,MADU;AAEbM,QAAAA,OAAO,EAAEH;AAFI,QAAf;AAID,KAlB8B;AAAA;;AAmB/BM,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,eAAD;AAAiB,MAAA,SAAS,EAAE,KAAKC;AAAjC,OACG,KAAKT,KAAL,CAAWU,WAAX,CAAuBC,GAAvB,CAA2BC,QAAQ,IAAI;AACtC,YAAMb,MAAM,GAAG,KAAKC,KAAL,CAAWC,OAAX,CAAmBW,QAAnB,CAAf;AACA,YAAMC,KAAK,GAAGd,MAAM,CAACM,OAAP,CAAeM,GAAf,CAAmBG,MAAM,IAAI,KAAKd,KAAL,CAAWa,KAAX,CAAiBC,MAAjB,CAA7B,CAAd;AACA,aAAO,MAAC,MAAD;AAAQ,QAAA,GAAG,EAAEf,MAAM,CAACgB,EAApB;AAAwB,QAAA,MAAM,EAAEhB,MAAhC;AAAwC,QAAA,KAAK,EAAEc;AAA/C,QAAP;AACD,KAJA,CADH,CADF;AASD;;AA7B8B;;AA+BjC,eAAepB,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n// import \"@atlaskit/css-reset\";\nimport Column from \"./column\";\nclass Dragable extends Component {\n  state = initialData;\n  onDragEnd = result => {\n    const { destination, source, draggableId } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.draggableId === source.draggableId && destination.index === source.index) {\n      return;\n    }\n    const column = this.state.columns[source.draggableId];\n    const newTaskIds = Array.from(column.taskIds);\n    newTaskIds.splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0, draggableId);\n    const newColumn = {\n      ...column,\n      taskIds: newTaskIds\n    };\n  };\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        {this.state.columnOrder.map(columnId => {\n          const column = this.state.columns[columnId];\n          const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n          return <Column key={column.id} column={column} tasks={tasks} />;\n        })}\n      </DragDropContext>\n    );\n  }\n}\nexport default Dragable;\n"]},"metadata":{},"sourceType":"module"}