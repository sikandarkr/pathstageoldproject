{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\"; // import \"@atlaskit/css-reset\";\n\nimport Column from \"./column\";\n\nconst array_move = (arr, old_index, new_index) => {\n  if (new_index >= arr.length) {\n    var k = new_index - arr.length + 1;\n\n    while (k--) {\n      arr.push(undefined);\n    }\n  }\n\n  arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n  return arr; // for testing\n};\n\nclass Dragable extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", initialData);\n\n    _defineProperty(this, \"onDragEnd\", result => {\n      console.log(\"result :::\", result);\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.draggableId === source.draggableId && destination.index === source.index) {\n        return;\n      }\n\n      const tasks = [...this.state.tasks];\n      console.log(\"new Tasks\", tasks); // const newArr = array_move([...this.state.tasks], source[\"index\"], destination[\"index\"]);\n      // this.setState({ tasks: newArr });\n    });\n  }\n\n  //   console.log(\"result \", result);\n  // document.body.style.color = \"inherit\";\n  // const { destination, source, draggableId } = result;\n  // if (!destination) {\n  //   return;\n  // }\n  // if (destination.draggableId === source.draggableId && destination.index === source.index) {\n  //   return;\n  // }\n  // const column = this.state.columns[source.droppableId];\n  // const newTaskIds = Array.from(column.taskIds);\n  // newTaskIds.splice(source.index, 1);\n  // newTaskIds.splice(destination.index, 0, draggableId);\n  // const newColumn = {\n  //   ...column,\n  //   taskIds: newTaskIds\n  // };\n  // const newState = {\n  //   ...this.state,\n  //   columns: {\n  //     ...this.state.columns,\n  //     [newColumn.id]: newColumn\n  //   }\n  // };\n  // this.setState(newState);\n  // };\n  render() {\n    return __jsx(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      onDragStart: this.onDragStart,\n      onDragUpdate: this.onDragUpdate\n    }, __jsx(Column, {\n      key: \"column.id\",\n      tasks: this.state.tasks\n    }));\n  } // render() {\n  //   return (\n  //     <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart} onDragUpdate={this.onDragUpdate}>\n  //       {this.state.columnOrder.map(columnId => {\n  //         const column = this.state.columns[columnId];\n  //         console.log(\"columnId ::: \", column);\n  //         const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n  //         console.log(\"task jdkfj \", tasks);\n  //         return <Column key={column.id} column={column} tasks={tasks} />;\n  //       })}\n  //     </DragDropContext>\n  //   );\n  // }\n\n\n}\n\nexport default Dragable;","map":{"version":3,"sources":["/Users/sikandarkumarkumar/Desktop/exampl/components/DragableExample/Dragable.js"],"names":["React","Component","initialData","DragDropContext","Column","array_move","arr","old_index","new_index","length","k","push","undefined","splice","Dragable","result","console","log","destination","source","draggableId","index","tasks","state","render","onDragEnd","onDragStart","onDragUpdate"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,eAAT,QAAgC,qBAAhC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,MAAMC,UAAU,GAAG,CAACC,GAAD,EAAMC,SAAN,EAAiBC,SAAjB,KAA+B;AAChD,MAAIA,SAAS,IAAIF,GAAG,CAACG,MAArB,EAA6B;AAC3B,QAAIC,CAAC,GAAGF,SAAS,GAAGF,GAAG,CAACG,MAAhB,GAAyB,CAAjC;;AACA,WAAOC,CAAC,EAAR,EAAY;AACVJ,MAAAA,GAAG,CAACK,IAAJ,CAASC,SAAT;AACD;AACF;;AACDN,EAAAA,GAAG,CAACO,MAAJ,CAAWL,SAAX,EAAsB,CAAtB,EAAyBF,GAAG,CAACO,MAAJ,CAAWN,SAAX,EAAsB,CAAtB,EAAyB,CAAzB,CAAzB;AACA,SAAOD,GAAP,CARgD,CAQpC;AACb,CATD;;AAWA,MAAMQ,QAAN,SAAuBb,SAAvB,CAAiC;AAAA;AAAA;;AAAA,mCACvBC,WADuB;;AAAA,uCASnBa,MAAM,IAAI;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,MAA1B;AACA,YAAM;AAAEG,QAAAA,WAAF;AAAeC,QAAAA,MAAf;AAAuBC,QAAAA;AAAvB,UAAuCL,MAA7C;;AACA,UAAI,CAACG,WAAL,EAAkB;AAChB;AACD;;AACD,UAAIA,WAAW,CAACE,WAAZ,KAA4BD,MAAM,CAACC,WAAnC,IAAkDF,WAAW,CAACG,KAAZ,KAAsBF,MAAM,CAACE,KAAnF,EAA0F;AACxF;AACD;;AACD,YAAMC,KAAK,GAAG,CAAC,GAAG,KAAKC,KAAL,CAAWD,KAAf,CAAd;AACAN,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBK,KAAzB,EAVoB,CAWpB;AACA;AACD,KAtB8B;AAAA;;AAuB/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACAE,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,eAAD;AAAiB,MAAA,SAAS,EAAE,KAAKC,SAAjC;AAA4C,MAAA,WAAW,EAAE,KAAKC,WAA9D;AAA2E,MAAA,YAAY,EAAE,KAAKC;AAA9F,OACE,MAAC,MAAD;AAAQ,MAAA,GAAG,EAAE,WAAb;AAA0B,MAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWD;AAA5C,MADF,CADF;AASD,GA5D8B,CA6D/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAzE+B;;AA2EjC,eAAeR,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n// import \"@atlaskit/css-reset\";\nimport Column from \"./column\";\n\nconst array_move = (arr, old_index, new_index) => {\n  if (new_index >= arr.length) {\n    var k = new_index - arr.length + 1;\n    while (k--) {\n      arr.push(undefined);\n    }\n  }\n  arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n  return arr; // for testing\n};\n\nclass Dragable extends Component {\n  state = initialData;\n  // onDragStart = () => {\n  //   document.body.style.color = \"orange\";\n  // };\n  // onDragUpdate = update => {\n  //   const { destination } = update;\n  //   const opacity = destination ? destination.index / Object.keys(this.state.tasks).length : 0;\n  // };\n  onDragEnd = result => {\n    console.log(\"result :::\", result);\n    const { destination, source, draggableId } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.draggableId === source.draggableId && destination.index === source.index) {\n      return;\n    }\n    const tasks = [...this.state.tasks];\n    console.log(\"new Tasks\", tasks);\n    // const newArr = array_move([...this.state.tasks], source[\"index\"], destination[\"index\"]);\n    // this.setState({ tasks: newArr });\n  };\n  //   console.log(\"result \", result);\n  // document.body.style.color = \"inherit\";\n  // const { destination, source, draggableId } = result;\n  // if (!destination) {\n  //   return;\n  // }\n  // if (destination.draggableId === source.draggableId && destination.index === source.index) {\n  //   return;\n  // }\n  // const column = this.state.columns[source.droppableId];\n  // const newTaskIds = Array.from(column.taskIds);\n  // newTaskIds.splice(source.index, 1);\n  // newTaskIds.splice(destination.index, 0, draggableId);\n  // const newColumn = {\n  //   ...column,\n  //   taskIds: newTaskIds\n  // };\n  // const newState = {\n  //   ...this.state,\n  //   columns: {\n  //     ...this.state.columns,\n  //     [newColumn.id]: newColumn\n  //   }\n  // };\n\n  // this.setState(newState);\n  // };\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart} onDragUpdate={this.onDragUpdate}>\n        <Column key={\"column.id\"} tasks={this.state.tasks} />\n        {/* {this.state.tasks.map((column, index) => {\n          \n          return <Column key={column.id} column={column} tasks={this.state.tasks} index={index} />;\n        })} */}\n      </DragDropContext>\n    );\n  }\n  // render() {\n  //   return (\n  //     <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart} onDragUpdate={this.onDragUpdate}>\n  //       {this.state.columnOrder.map(columnId => {\n  //         const column = this.state.columns[columnId];\n  //         console.log(\"columnId ::: \", column);\n  //         const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n  //         console.log(\"task jdkfj \", tasks);\n  //         return <Column key={column.id} column={column} tasks={tasks} />;\n  //       })}\n  //     </DragDropContext>\n  //   );\n  // }\n}\nexport default Dragable;\n"]},"metadata":{},"sourceType":"module"}