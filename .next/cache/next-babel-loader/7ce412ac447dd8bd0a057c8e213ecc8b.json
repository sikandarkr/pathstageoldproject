{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Array$from from \"@babel/runtime-corejs2/core-js/array/from\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\"; // import \"@atlaskit/css-reset\";\n\nimport Column from \"./column\";\n\nvar Dragable = /*#__PURE__*/function (_Component) {\n  _inherits(Dragable, _Component);\n\n  function Dragable() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dragable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dragable)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", initialData);\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragStart\", function () {\n      document.body.style.color = \"orange\";\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragEnd\", function (result) {\n      document.body.style.color = \"orange\";\n      var destination = result.destination,\n          source = result.source,\n          draggableId = result.draggableId;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.draggableId === source.draggableId && destination.index === source.index) {\n        return;\n      }\n\n      var column = _this.state.columns[source.droppableId];\n\n      var newTaskIds = _Array$from(column.taskIds);\n\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      var newColumn = _objectSpread({}, column, {\n        taskIds: newTaskIds\n      });\n\n      var newState = _objectSpread({}, _this.state, {\n        columns: _objectSpread({}, _this.state.columns, _defineProperty({}, newColumn.id, newColumn))\n      });\n\n      _this.setState(newState);\n    });\n\n    return _this;\n  }\n\n  _createClass(Dragable, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return __jsx(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        onDragStart: this.onDragStart\n      }, this.state.columnOrder.map(function (columnId) {\n        var column = _this2.state.columns[columnId];\n        var tasks = column.taskIds.map(function (taskId) {\n          return _this2.state.tasks[taskId];\n        });\n        return __jsx(Column, {\n          key: column.id,\n          column: column,\n          tasks: tasks\n        });\n      }));\n    }\n  }]);\n\n  return Dragable;\n}(Component);\n\nexport default Dragable;","map":{"version":3,"sources":["/Users/sikandarkumarkumar/Desktop/exampl/components/DragableExample/Dragable.js"],"names":["React","Component","initialData","DragDropContext","Column","Dragable","document","body","style","color","result","destination","source","draggableId","index","column","state","columns","droppableId","newTaskIds","taskIds","splice","newColumn","newState","id","setState","onDragEnd","onDragStart","columnOrder","map","columnId","tasks","taskId"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,eAAT,QAAgC,qBAAhC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;;IACMC,Q;;;;;;;;;;;;;;;;4DACIH,W;;kEACM,YAAM;AAClBI,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,KAApB,GAA4B,QAA5B;AACD,K;;gEACW,UAAAC,MAAM,EAAI;AACpBJ,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,KAApB,GAA4B,QAA5B;AADoB,UAEZE,WAFY,GAEyBD,MAFzB,CAEZC,WAFY;AAAA,UAECC,MAFD,GAEyBF,MAFzB,CAECE,MAFD;AAAA,UAESC,WAFT,GAEyBH,MAFzB,CAESG,WAFT;;AAGpB,UAAI,CAACF,WAAL,EAAkB;AAChB;AACD;;AACD,UAAIA,WAAW,CAACE,WAAZ,KAA4BD,MAAM,CAACC,WAAnC,IAAkDF,WAAW,CAACG,KAAZ,KAAsBF,MAAM,CAACE,KAAnF,EAA0F;AACxF;AACD;;AACD,UAAMC,MAAM,GAAG,MAAKC,KAAL,CAAWC,OAAX,CAAmBL,MAAM,CAACM,WAA1B,CAAf;;AACA,UAAMC,UAAU,GAAG,YAAWJ,MAAM,CAACK,OAAlB,CAAnB;;AACAD,MAAAA,UAAU,CAACE,MAAX,CAAkBT,MAAM,CAACE,KAAzB,EAAgC,CAAhC;AACAK,MAAAA,UAAU,CAACE,MAAX,CAAkBV,WAAW,CAACG,KAA9B,EAAqC,CAArC,EAAwCD,WAAxC;;AACA,UAAMS,SAAS,qBACVP,MADU;AAEbK,QAAAA,OAAO,EAAED;AAFI,QAAf;;AAIA,UAAMI,QAAQ,qBACT,MAAKP,KADI;AAEZC,QAAAA,OAAO,oBACF,MAAKD,KAAL,CAAWC,OADT,sBAEJK,SAAS,CAACE,EAFN,EAEWF,SAFX;AAFK,QAAd;;AAQA,YAAKG,QAAL,CAAcF,QAAd;AACD,K;;;;;;;6BACQ;AAAA;;AACP,aACE,MAAC,eAAD;AAAiB,QAAA,SAAS,EAAE,KAAKG,SAAjC;AAA4C,QAAA,WAAW,EAAE,KAAKC;AAA9D,SACG,KAAKX,KAAL,CAAWY,WAAX,CAAuBC,GAAvB,CAA2B,UAAAC,QAAQ,EAAI;AACtC,YAAMf,MAAM,GAAG,MAAI,CAACC,KAAL,CAAWC,OAAX,CAAmBa,QAAnB,CAAf;AACA,YAAMC,KAAK,GAAGhB,MAAM,CAACK,OAAP,CAAeS,GAAf,CAAmB,UAAAG,MAAM;AAAA,iBAAI,MAAI,CAAChB,KAAL,CAAWe,KAAX,CAAiBC,MAAjB,CAAJ;AAAA,SAAzB,CAAd;AACA,eAAO,MAAC,MAAD;AAAQ,UAAA,GAAG,EAAEjB,MAAM,CAACS,EAApB;AAAwB,UAAA,MAAM,EAAET,MAAhC;AAAwC,UAAA,KAAK,EAAEgB;AAA/C,UAAP;AACD,OAJA,CADH,CADF;AASD;;;;EA1CoB9B,S;;AA4CvB,eAAeI,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n// import \"@atlaskit/css-reset\";\nimport Column from \"./column\";\nclass Dragable extends Component {\n  state = initialData;\n  onDragStart = () => {\n    document.body.style.color = \"orange\";\n  };\n  onDragEnd = result => {\n    document.body.style.color = \"orange\";\n    const { destination, source, draggableId } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.draggableId === source.draggableId && destination.index === source.index) {\n      return;\n    }\n    const column = this.state.columns[source.droppableId];\n    const newTaskIds = Array.from(column.taskIds);\n    newTaskIds.splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0, draggableId);\n    const newColumn = {\n      ...column,\n      taskIds: newTaskIds\n    };\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newColumn.id]: newColumn\n      }\n    };\n\n    this.setState(newState);\n  };\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart}>\n        {this.state.columnOrder.map(columnId => {\n          const column = this.state.columns[columnId];\n          const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n          return <Column key={column.id} column={column} tasks={tasks} />;\n        })}\n      </DragDropContext>\n    );\n  }\n}\nexport default Dragable;\n"]},"metadata":{},"sourceType":"module"}