{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\"; // import \"@atlaskit/css-reset\";\n\nimport Column from \"./column\";\n\nclass Dragable extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", initialData);\n\n    _defineProperty(this, \"onDragStart\", () => {\n      document.body.style.color = \"orange\";\n    });\n\n    _defineProperty(this, \"onDragUpdate\", update => {\n      const {\n        destination\n      } = update;\n      const opacity = destination ? destination.index / Object.keys(this.state.tasks).length : 0;\n    });\n\n    _defineProperty(this, \"onDragEnd\", result => {\n      // document.body.style.color = \"inherit\";\n      const {\n        destination,\n        source,\n        draggableId\n      } = result;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.draggableId === source.draggableId && destination.index === source.index) {\n        return;\n      }\n\n      const column = this.state.columns[source.droppableId];\n      const newTaskIds = Array.from(column.taskIds);\n      newTaskIds.splice(source.index, 1);\n      newTaskIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = _objectSpread({}, column, {\n        taskIds: newTaskIds\n      });\n\n      const newState = _objectSpread({}, this.state, {\n        columns: _objectSpread({}, this.state.columns, {\n          [newColumn.id]: newColumn\n        })\n      });\n\n      this.setState(newState);\n    });\n  }\n\n  render() {\n    return __jsx(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      onDragStart: this.onDragStart,\n      onDragUpdate: this.onDragUpdate\n    }, this.state.columnOrder.map(columnId => {\n      const column = this.state.columns[columnId];\n      console.log(\"columnId ::: \", column);\n      const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n      console.log(\"task jdkfj \", tasks);\n      return __jsx(Column, {\n        key: column.id,\n        column: column,\n        tasks: tasks\n      });\n    }));\n  }\n\n}\n\nexport default Dragable;","map":{"version":3,"sources":["/Users/sikandarkumarkumar/Desktop/exampl/components/DragableExample/Dragable.js"],"names":["React","Component","initialData","DragDropContext","Column","Dragable","document","body","style","color","update","destination","opacity","index","Object","keys","state","tasks","length","result","source","draggableId","column","columns","droppableId","newTaskIds","Array","from","taskIds","splice","newColumn","newState","id","setState","render","onDragEnd","onDragStart","onDragUpdate","columnOrder","map","columnId","console","log","taskId"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,eAAT,QAAgC,qBAAhC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AACA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAAA;AAAA;;AAAA,mCACvBC,WADuB;;AAAA,yCAEjB,MAAM;AAClBI,MAAAA,QAAQ,CAACC,IAAT,CAAcC,KAAd,CAAoBC,KAApB,GAA4B,QAA5B;AACD,KAJ8B;;AAAA,0CAKhBC,MAAM,IAAI;AACvB,YAAM;AAAEC,QAAAA;AAAF,UAAkBD,MAAxB;AACA,YAAME,OAAO,GAAGD,WAAW,GAAGA,WAAW,CAACE,KAAZ,GAAoBC,MAAM,CAACC,IAAP,CAAY,KAAKC,KAAL,CAAWC,KAAvB,EAA8BC,MAArD,GAA8D,CAAzF;AACD,KAR8B;;AAAA,uCASnBC,MAAM,IAAI;AACpB;AACA,YAAM;AAAER,QAAAA,WAAF;AAAeS,QAAAA,MAAf;AAAuBC,QAAAA;AAAvB,UAAuCF,MAA7C;;AACA,UAAI,CAACR,WAAL,EAAkB;AAChB;AACD;;AACD,UAAIA,WAAW,CAACU,WAAZ,KAA4BD,MAAM,CAACC,WAAnC,IAAkDV,WAAW,CAACE,KAAZ,KAAsBO,MAAM,CAACP,KAAnF,EAA0F;AACxF;AACD;;AACD,YAAMS,MAAM,GAAG,KAAKN,KAAL,CAAWO,OAAX,CAAmBH,MAAM,CAACI,WAA1B,CAAf;AACA,YAAMC,UAAU,GAAGC,KAAK,CAACC,IAAN,CAAWL,MAAM,CAACM,OAAlB,CAAnB;AACAH,MAAAA,UAAU,CAACI,MAAX,CAAkBT,MAAM,CAACP,KAAzB,EAAgC,CAAhC;AACAY,MAAAA,UAAU,CAACI,MAAX,CAAkBlB,WAAW,CAACE,KAA9B,EAAqC,CAArC,EAAwCQ,WAAxC;;AACA,YAAMS,SAAS,qBACVR,MADU;AAEbM,QAAAA,OAAO,EAAEH;AAFI,QAAf;;AAIA,YAAMM,QAAQ,qBACT,KAAKf,KADI;AAEZO,QAAAA,OAAO,oBACF,KAAKP,KAAL,CAAWO,OADT;AAEL,WAACO,SAAS,CAACE,EAAX,GAAgBF;AAFX;AAFK,QAAd;;AAQA,WAAKG,QAAL,CAAcF,QAAd;AACD,KAnC8B;AAAA;;AAoC/BG,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,eAAD;AAAiB,MAAA,SAAS,EAAE,KAAKC,SAAjC;AAA4C,MAAA,WAAW,EAAE,KAAKC,WAA9D;AAA2E,MAAA,YAAY,EAAE,KAAKC;AAA9F,OACG,KAAKrB,KAAL,CAAWsB,WAAX,CAAuBC,GAAvB,CAA2BC,QAAQ,IAAI;AACtC,YAAMlB,MAAM,GAAG,KAAKN,KAAL,CAAWO,OAAX,CAAmBiB,QAAnB,CAAf;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BpB,MAA7B;AACA,YAAML,KAAK,GAAGK,MAAM,CAACM,OAAP,CAAeW,GAAf,CAAmBI,MAAM,IAAI,KAAK3B,KAAL,CAAWC,KAAX,CAAiB0B,MAAjB,CAA7B,CAAd;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BzB,KAA3B;AACA,aAAO,MAAC,MAAD;AAAQ,QAAA,GAAG,EAAEK,MAAM,CAACU,EAApB;AAAwB,QAAA,MAAM,EAAEV,MAAhC;AAAwC,QAAA,KAAK,EAAEL;AAA/C,QAAP;AACD,KANA,CADH,CADF;AAWD;;AAhD8B;;AAkDjC,eAAeZ,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n// import \"@atlaskit/css-reset\";\nimport Column from \"./column\";\nclass Dragable extends Component {\n  state = initialData;\n  onDragStart = () => {\n    document.body.style.color = \"orange\";\n  };\n  onDragUpdate = update => {\n    const { destination } = update;\n    const opacity = destination ? destination.index / Object.keys(this.state.tasks).length : 0;\n  };\n  onDragEnd = result => {\n    // document.body.style.color = \"inherit\";\n    const { destination, source, draggableId } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.draggableId === source.draggableId && destination.index === source.index) {\n      return;\n    }\n    const column = this.state.columns[source.droppableId];\n    const newTaskIds = Array.from(column.taskIds);\n    newTaskIds.splice(source.index, 1);\n    newTaskIds.splice(destination.index, 0, draggableId);\n    const newColumn = {\n      ...column,\n      taskIds: newTaskIds\n    };\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newColumn.id]: newColumn\n      }\n    };\n\n    this.setState(newState);\n  };\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart} onDragUpdate={this.onDragUpdate}>\n        {this.state.columnOrder.map(columnId => {\n          const column = this.state.columns[columnId];\n          console.log(\"columnId ::: \", column);\n          const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n          console.log(\"task jdkfj \", tasks);\n          return <Column key={column.id} column={column} tasks={tasks} />;\n        })}\n      </DragDropContext>\n    );\n  }\n}\nexport default Dragable;\n"]},"metadata":{},"sourceType":"module"}