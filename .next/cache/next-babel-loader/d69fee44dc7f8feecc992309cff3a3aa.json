{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport App, { Container } from \"next/app\";\nimport { Provider } from \"react-redux\";\nimport React from \"react\";\nimport withRedux from \"next-redux-wrapper\";\nimport store from \"../redux/store\";\nimport Navbar from '../components/Navbar/Navar'; // import \"../static/css/style.scss\";\n\nimport \"../style.less\";\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {}; //Anything returned here can be accessed by the client\n\n    return {\n      pageProps: pageProps\n    };\n  }\n\n  render() {\n    //pageProps that were returned  from 'getInitialProps' are stored in the props i.e. pageprops\n    const {\n      Component,\n      pageProps,\n      store\n    } = this.props;\n    return __jsx(Provider, {\n      store: store\n    }, __jsx(Container, null, __jsx(Navbar, this.props), __jsx(Component, _extends({\n      pageContext: this.pageContext\n    }, pageProps))));\n  }\n\n} //makeStore function that returns a new store for every request\n\n\nconst makeStore = () => store; //withRedux wrapper that passes the store to the App Component\n\n\nexport default withRedux(makeStore)(MyApp);","map":{"version":3,"sources":["/Users/sikandarkumarkumar/Desktop/Others/exampl/pages/_app.js"],"names":["App","Container","Provider","React","withRedux","store","Navbar","MyApp","getInitialProps","Component","ctx","pageProps","render","props","pageContext","makeStore"],"mappings":";;;;AAAA,OAAOA,GAAP,IAAcC,SAAd,QAA+B,UAA/B;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB,C,CACA;;AACA,OAAO,eAAP;;AACA,MAAMC,KAAN,SAAoBP,GAApB,CAAwB;AACtB,eAAaQ,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAC/C,UAAMC,SAAS,GAAGF,SAAS,CAACD,eAAV,GAA4B,MAAMC,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlC,GAAmE,EAArF,CAD+C,CAG/C;;AACA,WAAO;AAAEC,MAAAA,SAAS,EAAEA;AAAb,KAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP;AACA,UAAM;AAAEH,MAAAA,SAAF;AAAaE,MAAAA,SAAb;AAAwBN,MAAAA;AAAxB,QAAkC,KAAKQ,KAA7C;AAEA,WACE,MAAC,QAAD;AAAU,MAAA,KAAK,EAAER;AAAjB,OACE,MAAC,SAAD,QACE,MAAC,MAAD,EAAa,KAAKQ,KAAlB,CADF,EAEE,MAAC,SAAD;AAAW,MAAA,WAAW,EAAE,KAAKC;AAA7B,OAA8CH,SAA9C,EAFF,CADF,CADF;AAQD;;AApBqB,C,CAuBxB;;;AACA,MAAMI,SAAS,GAAG,MAAMV,KAAxB,C,CAEA;;;AACA,eAAeD,SAAS,CAACW,SAAD,CAAT,CAAqBR,KAArB,CAAf","sourcesContent":["import App, { Container } from \"next/app\";\nimport { Provider } from \"react-redux\";\nimport React from \"react\";\nimport withRedux from \"next-redux-wrapper\";\nimport store from \"../redux/store\";\nimport Navbar from '../components/Navbar/Navar'\n// import \"../static/css/style.scss\";\nimport \"../style.less\";\nclass MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};\n\n    //Anything returned here can be accessed by the client\n    return { pageProps: pageProps };\n  }\n\n  render() {\n    //pageProps that were returned  from 'getInitialProps' are stored in the props i.e. pageprops\n    const { Component, pageProps, store } = this.props;\n\n    return (\n      <Provider store={store}>\n        <Container>\n          <Navbar  {...this.props}/>\n          <Component pageContext={this.pageContext} {...pageProps} />\n        </Container>\n      </Provider>\n    );\n  }\n}\n\n//makeStore function that returns a new store for every request\nconst makeStore = () => store;\n\n//withRedux wrapper that passes the store to the App Component\nexport default withRedux(makeStore)(MyApp);\n"]},"metadata":{},"sourceType":"module"}