{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { Component } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\"; // import \"@atlaskit/css-reset\";\n\nimport Column from \"./column\";\n\nvar array_move = function array_move(arr, old_index, new_index) {\n  if (new_index >= arr.length) {\n    var k = new_index - arr.length + 1;\n\n    while (k--) {\n      arr.push(undefined);\n    }\n  }\n\n  arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n  return arr; // for testing\n};\n\nvar Dragable = /*#__PURE__*/function (_Component) {\n  _inherits(Dragable, _Component);\n\n  function Dragable() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Dragable);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Dragable)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _defineProperty(_assertThisInitialized(_this), \"state\", initialData);\n\n    _defineProperty(_assertThisInitialized(_this), \"onDragEnd\", function (result) {\n      console.log(\"result :::\", result);\n      var destination = result.destination,\n          source = result.source,\n          draggableId = result.draggableId;\n\n      if (!destination) {\n        return;\n      }\n\n      if (destination.draggableId === source.draggableId && destination.index === source.index) {\n        return;\n      }\n\n      var tasks = _toConsumableArray(_this.state.tasks);\n\n      var newArr = array_move(tasks, source[\"index\"], destination[\"index\"]);\n      console.log(\"new newArr\", newArr); // this.setState({ tasks: newArr });\n    });\n\n    return _this;\n  }\n\n  _createClass(Dragable, [{\n    key: \"render\",\n    //   console.log(\"result \", result);\n    // document.body.style.color = \"inherit\";\n    // const { destination, source, draggableId } = result;\n    // if (!destination) {\n    //   return;\n    // }\n    // if (destination.draggableId === source.draggableId && destination.index === source.index) {\n    //   return;\n    // }\n    // const column = this.state.columns[source.droppableId];\n    // const newTaskIds = Array.from(column.taskIds);\n    // newTaskIds.splice(source.index, 1);\n    // newTaskIds.splice(destination.index, 0, draggableId);\n    // const newColumn = {\n    //   ...column,\n    //   taskIds: newTaskIds\n    // };\n    // const newState = {\n    //   ...this.state,\n    //   columns: {\n    //     ...this.state.columns,\n    //     [newColumn.id]: newColumn\n    //   }\n    // };\n    // this.setState(newState);\n    // };\n    value: function render() {\n      return __jsx(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        onDragStart: this.onDragStart,\n        onDragUpdate: this.onDragUpdate\n      }, __jsx(Column, {\n        key: \"column.id\",\n        tasks: this.state.tasks\n      }));\n    } // render() {\n    //   return (\n    //     <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart} onDragUpdate={this.onDragUpdate}>\n    //       {this.state.columnOrder.map(columnId => {\n    //         const column = this.state.columns[columnId];\n    //         console.log(\"columnId ::: \", column);\n    //         const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n    //         console.log(\"task jdkfj \", tasks);\n    //         return <Column key={column.id} column={column} tasks={tasks} />;\n    //       })}\n    //     </DragDropContext>\n    //   );\n    // }\n\n  }]);\n\n  return Dragable;\n}(Component);\n\nexport default Dragable;","map":{"version":3,"sources":["/Users/sikandarkumarkumar/Desktop/exampl/components/DragableExample/Dragable.js"],"names":["React","Component","initialData","DragDropContext","Column","array_move","arr","old_index","new_index","length","k","push","undefined","splice","Dragable","result","console","log","destination","source","draggableId","index","tasks","state","newArr","onDragEnd","onDragStart","onDragUpdate"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,eAAT,QAAgC,qBAAhC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAMC,SAAN,EAAiBC,SAAjB,EAA+B;AAChD,MAAIA,SAAS,IAAIF,GAAG,CAACG,MAArB,EAA6B;AAC3B,QAAIC,CAAC,GAAGF,SAAS,GAAGF,GAAG,CAACG,MAAhB,GAAyB,CAAjC;;AACA,WAAOC,CAAC,EAAR,EAAY;AACVJ,MAAAA,GAAG,CAACK,IAAJ,CAASC,SAAT;AACD;AACF;;AACDN,EAAAA,GAAG,CAACO,MAAJ,CAAWL,SAAX,EAAsB,CAAtB,EAAyBF,GAAG,CAACO,MAAJ,CAAWN,SAAX,EAAsB,CAAtB,EAAyB,CAAzB,CAAzB;AACA,SAAOD,GAAP,CARgD,CAQpC;AACb,CATD;;IAWMQ,Q;;;;;;;;;;;;;;;;4DACIZ,W;;gEAQI,UAAAa,MAAM,EAAI;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,MAA1B;AADoB,UAEZG,WAFY,GAEyBH,MAFzB,CAEZG,WAFY;AAAA,UAECC,MAFD,GAEyBJ,MAFzB,CAECI,MAFD;AAAA,UAESC,WAFT,GAEyBL,MAFzB,CAESK,WAFT;;AAGpB,UAAI,CAACF,WAAL,EAAkB;AAChB;AACD;;AACD,UAAIA,WAAW,CAACE,WAAZ,KAA4BD,MAAM,CAACC,WAAnC,IAAkDF,WAAW,CAACG,KAAZ,KAAsBF,MAAM,CAACE,KAAnF,EAA0F;AACxF;AACD;;AACD,UAAMC,KAAK,sBAAO,MAAKC,KAAL,CAAWD,KAAlB,CAAX;;AAEA,UAAME,MAAM,GAAGnB,UAAU,CAACiB,KAAD,EAAQH,MAAM,CAAC,OAAD,CAAd,EAAyBD,WAAW,CAAC,OAAD,CAApC,CAAzB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BO,MAA1B,EAZoB,CAapB;AACD,K;;;;;;;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;6BACS;AACP,aACE,MAAC,eAAD;AAAiB,QAAA,SAAS,EAAE,KAAKC,SAAjC;AAA4C,QAAA,WAAW,EAAE,KAAKC,WAA9D;AAA2E,QAAA,YAAY,EAAE,KAAKC;AAA9F,SACE,MAAC,MAAD;AAAQ,QAAA,GAAG,EAAE,WAAb;AAA0B,QAAA,KAAK,EAAE,KAAKJ,KAAL,CAAWD;AAA5C,QADF,CADF;AASD,K,CACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;EA1EqBrB,S;;AA4EvB,eAAea,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n// import \"@atlaskit/css-reset\";\nimport Column from \"./column\";\n\nconst array_move = (arr, old_index, new_index) => {\n  if (new_index >= arr.length) {\n    var k = new_index - arr.length + 1;\n    while (k--) {\n      arr.push(undefined);\n    }\n  }\n  arr.splice(new_index, 0, arr.splice(old_index, 1)[0]);\n  return arr; // for testing\n};\n\nclass Dragable extends Component {\n  state = initialData;\n  // onDragStart = () => {\n  //   document.body.style.color = \"orange\";\n  // };\n  // onDragUpdate = update => {\n  //   const { destination } = update;\n  //   const opacity = destination ? destination.index / Object.keys(this.state.tasks).length : 0;\n  // };\n  onDragEnd = result => {\n    console.log(\"result :::\", result);\n    const { destination, source, draggableId } = result;\n    if (!destination) {\n      return;\n    }\n    if (destination.draggableId === source.draggableId && destination.index === source.index) {\n      return;\n    }\n    const tasks = [...this.state.tasks];\n\n    const newArr = array_move(tasks, source[\"index\"], destination[\"index\"]);\n    console.log(\"new newArr\", newArr);\n    // this.setState({ tasks: newArr });\n  };\n  //   console.log(\"result \", result);\n  // document.body.style.color = \"inherit\";\n  // const { destination, source, draggableId } = result;\n  // if (!destination) {\n  //   return;\n  // }\n  // if (destination.draggableId === source.draggableId && destination.index === source.index) {\n  //   return;\n  // }\n  // const column = this.state.columns[source.droppableId];\n  // const newTaskIds = Array.from(column.taskIds);\n  // newTaskIds.splice(source.index, 1);\n  // newTaskIds.splice(destination.index, 0, draggableId);\n  // const newColumn = {\n  //   ...column,\n  //   taskIds: newTaskIds\n  // };\n  // const newState = {\n  //   ...this.state,\n  //   columns: {\n  //     ...this.state.columns,\n  //     [newColumn.id]: newColumn\n  //   }\n  // };\n\n  // this.setState(newState);\n  // };\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart} onDragUpdate={this.onDragUpdate}>\n        <Column key={\"column.id\"} tasks={this.state.tasks} />\n        {/* {this.state.tasks.map((column, index) => {\n          \n          return <Column key={column.id} column={column} tasks={this.state.tasks} index={index} />;\n        })} */}\n      </DragDropContext>\n    );\n  }\n  // render() {\n  //   return (\n  //     <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart} onDragUpdate={this.onDragUpdate}>\n  //       {this.state.columnOrder.map(columnId => {\n  //         const column = this.state.columns[columnId];\n  //         console.log(\"columnId ::: \", column);\n  //         const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n  //         console.log(\"task jdkfj \", tasks);\n  //         return <Column key={column.id} column={column} tasks={tasks} />;\n  //       })}\n  //     </DragDropContext>\n  //   );\n  // }\n}\nexport default Dragable;\n"]},"metadata":{},"sourceType":"module"}