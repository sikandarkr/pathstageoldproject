{"ast":null,"code":"var _jsxFileName = \"/Users/sikandarkumarkumar/Desktop/Others/exampl/components/index/Post.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Badge from \"@material-ui/core/Badge\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Comment from \"@material-ui/icons/Comment\";\nimport DeleteTwoTone from \"@material-ui/icons/DeleteTwoTone\";\nimport Favorite from \"@material-ui/icons/Favorite\";\nimport FavoriteBorder from \"@material-ui/icons/FavoriteBorder\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport distanceInWordsToNow from \"date-fns/distance_in_words_to_now\";\nimport Link from \"next/link\";\nimport Comments from \"./Comments\";\n\nclass Post extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      isLiked: false,\n      numLikes: 0,\n      comments: []\n    });\n\n    _defineProperty(this, \"checkLiked\", likes => likes.includes(this.props.auth.user._id));\n\n    _defineProperty(this, \"formatTimeCreated\", time => distanceInWordsToNow(time, {\n      includeSeconds: true,\n      addSuffix: true\n    }));\n  }\n\n  componentDidMount() {\n    this.setState({\n      isLiked: this.checkLiked(this.props.post.likes),\n      numLikes: this.props.post.likes.length,\n      comments: this.props.post.comments\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.post.likes.length !== this.props.post.likes.length) {\n      this.setState({\n        isLiked: this.checkLiked(this.props.post.likes),\n        numLikes: this.props.post.likes.length\n      });\n    }\n\n    if (prevProps.post.comments.length !== this.props.post.comments.length) {\n      this.setState({\n        comments: this.props.post.comments\n      });\n    }\n  }\n\n  render() {\n    const {\n      classes,\n      post,\n      auth,\n      isDeletingPost,\n      handleDeletePost,\n      handleToggleLike,\n      handleAddComment,\n      handleDeleteComment\n    } = this.props;\n    const {\n      isLiked,\n      numLikes,\n      comments\n    } = this.state;\n    const isPostCreator = post.postedBy._id === auth.user._id;\n    return __jsx(Card, {\n      className: classes.card,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, __jsx(CardHeader, {\n      avatar: __jsx(Avatar, {\n        src: post.postedBy.avatar,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 19\n        }\n      }),\n      action: isPostCreator && __jsx(IconButton, {\n        disabled: isDeletingPost,\n        onClick: () => handleDeletePost(post),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 15\n        }\n      }, __jsx(DeleteTwoTone, {\n        color: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      })),\n      title: __jsx(Link, {\n        href: `/profile/${post.postedBy._id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }\n      }, post.postedBy.name)),\n      subheader: this.formatTimeCreated(post.createdAt),\n      className: classes.cardHeader,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    }), __jsx(CardContent, {\n      className: classes.cardContent,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }\n    }, __jsx(Typography, {\n      variant: \"body1\",\n      className: classes.text,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }\n    }, post.text), post.image && __jsx(\"div\", {\n      className: classes.imageContainer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }, __jsx(\"img\", {\n      className: classes.image,\n      src: post.image,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }))), __jsx(CardActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }, __jsx(IconButton, {\n      onClick: () => handleToggleLike(post),\n      className: classes.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }\n    }, __jsx(Badge, {\n      badgeContent: numLikes,\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }, isLiked ? __jsx(Favorite, {\n      className: classes.favoriteIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }) : __jsx(FavoriteBorder, {\n      className: classes.favoriteIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    }))), __jsx(IconButton, {\n      className: classes.button,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }\n    }, __jsx(Badge, {\n      badgeContent: comments.length,\n      color: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }\n    }, __jsx(Comment, {\n      className: classes.commentIcon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    })))), __jsx(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }\n    }), __jsx(Comments, {\n      auth: auth,\n      postId: post._id,\n      comments: comments,\n      handleAddComment: handleAddComment,\n      handleDeleteComment: handleDeleteComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nconst styles = theme => ({\n  card: {\n    marginBottom: theme.spacing.unit * 3\n  },\n  cardContent: {\n    backgroundColor: \"white\"\n  },\n  cardHeader: {\n    paddingTop: theme.spacing.unit,\n    paddingBottom: theme.spacing.unit,\n    backgroundColor: \"rgba(11, 61, 130, 0.06)\"\n  },\n  imageContainer: {\n    textAlign: \"center\",\n    padding: theme.spacing.unit\n  },\n  image: {\n    height: 200\n  },\n  favoriteIcon: {\n    color: theme.palette.favoriteIcon\n  },\n  commentIcon: {\n    color: theme.palette.commentIcon\n  }\n});\n\nexport default withStyles(styles)(Post);","map":{"version":3,"sources":["/Users/sikandarkumarkumar/Desktop/Others/exampl/components/index/Post.js"],"names":["Badge","Card","CardHeader","CardContent","CardActions","Typography","IconButton","Divider","Avatar","Comment","DeleteTwoTone","Favorite","FavoriteBorder","withStyles","distanceInWordsToNow","Link","Comments","Post","React","PureComponent","isLiked","numLikes","comments","likes","includes","props","auth","user","_id","time","includeSeconds","addSuffix","componentDidMount","setState","checkLiked","post","length","componentDidUpdate","prevProps","render","classes","isDeletingPost","handleDeletePost","handleToggleLike","handleAddComment","handleDeleteComment","state","isPostCreator","postedBy","card","avatar","name","formatTimeCreated","createdAt","cardHeader","cardContent","text","image","imageContainer","button","favoriteIcon","commentIcon","styles","theme","marginBottom","spacing","unit","backgroundColor","paddingTop","paddingBottom","textAlign","padding","height","color","palette"],"mappings":"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","sourcesContent":["import Badge from \"@material-ui/core/Badge\";\nimport Card from \"@material-ui/core/Card\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Comment from \"@material-ui/icons/Comment\";\nimport DeleteTwoTone from \"@material-ui/icons/DeleteTwoTone\";\nimport Favorite from \"@material-ui/icons/Favorite\";\nimport FavoriteBorder from \"@material-ui/icons/FavoriteBorder\";\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport distanceInWordsToNow from \"date-fns/distance_in_words_to_now\";\nimport Link from \"next/link\";\n\nimport Comments from \"./Comments\";\n\nclass Post extends React.PureComponent {\n  state = {\n    isLiked: false,\n    numLikes: 0,\n    comments: []\n  };\n\n  componentDidMount() {\n    this.setState({\n      isLiked: this.checkLiked(this.props.post.likes),\n      numLikes: this.props.post.likes.length,\n      comments: this.props.post.comments\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.post.likes.length !== this.props.post.likes.length) {\n      this.setState({\n        isLiked: this.checkLiked(this.props.post.likes),\n        numLikes: this.props.post.likes.length\n      });\n    }\n\n    if (prevProps.post.comments.length !== this.props.post.comments.length) {\n      this.setState({\n        comments: this.props.post.comments\n      });\n    }\n  }\n\n  checkLiked = likes => likes.includes(this.props.auth.user._id);\n\n  formatTimeCreated = time =>\n    distanceInWordsToNow(time, {\n      includeSeconds: true,\n      addSuffix: true\n    });\n\n  render() {\n    const {\n      classes,\n      post,\n      auth,\n      isDeletingPost,\n      handleDeletePost,\n      handleToggleLike,\n      handleAddComment,\n      handleDeleteComment\n    } = this.props;\n    const { isLiked, numLikes, comments } = this.state;\n    const isPostCreator = post.postedBy._id === auth.user._id;\n\n    return (\n      <Card className={classes.card}>\n        {/* Post Header */}\n        <CardHeader\n          avatar={<Avatar src={post.postedBy.avatar} />}\n          action={\n            isPostCreator && (\n              <IconButton\n                disabled={isDeletingPost}\n                onClick={() => handleDeletePost(post)}\n              >\n                <DeleteTwoTone color=\"secondary\" />\n              </IconButton>\n            )\n          }\n          title={\n            <Link href={`/profile/${post.postedBy._id}`}>\n              <a>{post.postedBy.name}</a>\n            </Link>\n          }\n          subheader={this.formatTimeCreated(post.createdAt)}\n          className={classes.cardHeader}\n        />\n        <CardContent className={classes.cardContent}>\n          <Typography variant=\"body1\" className={classes.text}>\n            {post.text}\n          </Typography>\n          {/* Post Image */}\n          {post.image && (\n            <div className={classes.imageContainer}>\n              <img className={classes.image} src={post.image} />\n            </div>\n          )}\n        </CardContent>\n\n        {/* Post Actions */}\n        <CardActions>\n          <IconButton\n            onClick={() => handleToggleLike(post)}\n            className={classes.button}\n          >\n            <Badge badgeContent={numLikes} color=\"secondary\">\n              {isLiked ? (\n                <Favorite className={classes.favoriteIcon} />\n              ) : (\n                <FavoriteBorder className={classes.favoriteIcon} />\n              )}\n            </Badge>\n          </IconButton>\n          <IconButton className={classes.button}>\n            <Badge badgeContent={comments.length} color=\"primary\">\n              <Comment className={classes.commentIcon} />\n            </Badge>\n          </IconButton>\n        </CardActions>\n        <Divider />\n\n        {/* Comments Area */}\n        <Comments\n          auth={auth}\n          postId={post._id}\n          comments={comments}\n          handleAddComment={handleAddComment}\n          handleDeleteComment={handleDeleteComment}\n        />\n      </Card>\n    );\n  }\n}\n\nconst styles = theme => ({\n  card: {\n    marginBottom: theme.spacing.unit * 3\n  },\n  cardContent: {\n    backgroundColor: \"white\"\n  },\n  cardHeader: {\n    paddingTop: theme.spacing.unit,\n    paddingBottom: theme.spacing.unit,\n    backgroundColor: \"rgba(11, 61, 130, 0.06)\"\n  },\n  imageContainer: {\n    textAlign: \"center\",\n    padding: theme.spacing.unit\n  },\n  image: {\n    height: 200\n  },\n  favoriteIcon: {\n    color: theme.palette.favoriteIcon\n  },\n  commentIcon: {\n    color: theme.palette.commentIcon\n  }\n});\n\nexport default withStyles(styles)(Post);\n"]},"metadata":{},"sourceType":"module"}