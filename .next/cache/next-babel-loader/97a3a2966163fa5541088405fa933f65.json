{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\"; // import \"@atlaskit/css-reset\";\n\nimport Column from \"./column\";\n\nclass Dragable extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", initialData);\n  }\n\n  // onDragStart = () => {\n  //   document.body.style.color = \"orange\";\n  // };\n  // onDragUpdate = update => {\n  //   const { destination } = update;\n  //   const opacity = destination ? destination.index / Object.keys(this.state.tasks).length : 0;\n  // };\n  // onDragEnd = result => {\n  //   document.body.style.color = \"inherit\";\n  //   const { destination, source, draggableId } = result;\n  //   if (!destination) {\n  //     return;\n  //   }\n  //   if (destination.draggableId === source.draggableId && destination.index === source.index) {\n  //     return;\n  //   }\n  //   const column = this.state.columns[source.droppableId];\n  //   const newTaskIds = Array.from(column.taskIds);\n  //   newTaskIds.splice(source.index, 1);\n  //   newTaskIds.splice(destination.index, 0, draggableId);\n  //   const newColumn = {\n  //     ...column,\n  //     taskIds: newTaskIds\n  //   };\n  //   const newState = {\n  //     ...this.state,\n  //     columns: {\n  //       ...this.state.columns,\n  //       [newColumn.id]: newColumn\n  //     }\n  //   };\n  //   this.setState(newState);\n  // };\n  render() {\n    return __jsx(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      onDragStart: this.onDragStart,\n      onDragUpdate: this.onDragUpdate\n    }, this.state.tasks.map((column, index) => {\n      // const column = this.state.columns[columnId];\n      // console.log(\"columnId ::: \", column);\n      // const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n      console.log(\"column \", column); // return null;\n\n      return __jsx(Column, {\n        key: column.id,\n        column: column,\n        tasks: this.state.tasks,\n        index: index\n      });\n    }));\n  } // render() {\n  //   return (\n  //     <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart} onDragUpdate={this.onDragUpdate}>\n  //       {this.state.columnOrder.map(columnId => {\n  //         const column = this.state.columns[columnId];\n  //         console.log(\"columnId ::: \", column);\n  //         const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n  //         console.log(\"task jdkfj \", tasks);\n  //         return <Column key={column.id} column={column} tasks={tasks} />;\n  //       })}\n  //     </DragDropContext>\n  //   );\n  // }\n\n\n}\n\nexport default Dragable;","map":{"version":3,"sources":["/Users/sikandarkumarkumar/Desktop/exampl/components/DragableExample/Dragable.js"],"names":["React","Component","initialData","DragDropContext","Column","Dragable","render","onDragEnd","onDragStart","onDragUpdate","state","tasks","map","column","index","console","log","id"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,eAAT,QAAgC,qBAAhC,C,CACA;;AACA,OAAOC,MAAP,MAAmB,UAAnB;;AACA,MAAMC,QAAN,SAAuBJ,SAAvB,CAAiC;AAAA;AAAA;;AAAA,mCACvBC,WADuB;AAAA;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACAI,EAAAA,MAAM,GAAG;AACP,WACE,MAAC,eAAD;AAAiB,MAAA,SAAS,EAAE,KAAKC,SAAjC;AAA4C,MAAA,WAAW,EAAE,KAAKC,WAA9D;AAA2E,MAAA,YAAY,EAAE,KAAKC;AAA9F,OACG,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAqB,CAACC,MAAD,EAASC,KAAT,KAAmB;AACvC;AACA;AACA;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,MAAvB,EAJuC,CAKvC;;AACA,aAAO,MAAC,MAAD;AAAQ,QAAA,GAAG,EAAEA,MAAM,CAACI,EAApB;AAAwB,QAAA,MAAM,EAAEJ,MAAhC;AAAwC,QAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,KAA1D;AAAiE,QAAA,KAAK,EAAEG;AAAxE,QAAP;AACD,KAPA,CADH,CADF;AAYD,GAjD8B,CAkD/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AA9D+B;;AAgEjC,eAAeT,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport initialData from \"./initial-data\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\n// import \"@atlaskit/css-reset\";\nimport Column from \"./column\";\nclass Dragable extends Component {\n  state = initialData;\n  // onDragStart = () => {\n  //   document.body.style.color = \"orange\";\n  // };\n  // onDragUpdate = update => {\n  //   const { destination } = update;\n  //   const opacity = destination ? destination.index / Object.keys(this.state.tasks).length : 0;\n  // };\n  // onDragEnd = result => {\n  //   document.body.style.color = \"inherit\";\n  //   const { destination, source, draggableId } = result;\n  //   if (!destination) {\n  //     return;\n  //   }\n  //   if (destination.draggableId === source.draggableId && destination.index === source.index) {\n  //     return;\n  //   }\n  //   const column = this.state.columns[source.droppableId];\n  //   const newTaskIds = Array.from(column.taskIds);\n  //   newTaskIds.splice(source.index, 1);\n  //   newTaskIds.splice(destination.index, 0, draggableId);\n  //   const newColumn = {\n  //     ...column,\n  //     taskIds: newTaskIds\n  //   };\n  //   const newState = {\n  //     ...this.state,\n  //     columns: {\n  //       ...this.state.columns,\n  //       [newColumn.id]: newColumn\n  //     }\n  //   };\n\n  //   this.setState(newState);\n  // };\n  render() {\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart} onDragUpdate={this.onDragUpdate}>\n        {this.state.tasks.map((column, index) => {\n          // const column = this.state.columns[columnId];\n          // console.log(\"columnId ::: \", column);\n          // const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n          console.log(\"column \", column);\n          // return null;\n          return <Column key={column.id} column={column} tasks={this.state.tasks} index={index} />;\n        })}\n      </DragDropContext>\n    );\n  }\n  // render() {\n  //   return (\n  //     <DragDropContext onDragEnd={this.onDragEnd} onDragStart={this.onDragStart} onDragUpdate={this.onDragUpdate}>\n  //       {this.state.columnOrder.map(columnId => {\n  //         const column = this.state.columns[columnId];\n  //         console.log(\"columnId ::: \", column);\n  //         const tasks = column.taskIds.map(taskId => this.state.tasks[taskId]);\n  //         console.log(\"task jdkfj \", tasks);\n  //         return <Column key={column.id} column={column} tasks={tasks} />;\n  //       })}\n  //     </DragDropContext>\n  //   );\n  // }\n}\nexport default Dragable;\n"]},"metadata":{},"sourceType":"module"}